//
//  RecommendedActivitiesViewModel.swift
//  InterAct
//
//  Created by admin on 2024/11/28.
//

import Foundation
import CoreLocation
import SwiftUI
import LeanCloud

// Êé®ËçêÊ¥ªÂä®ËßÜÂõæÊ®°Âûã
class RecommendedActivitiesViewModel: NSObject, ObservableObject, CLLocationManagerDelegate {
    @Published var activities: [Activity] = []
    @Published var searchText: String = ""
    @Published var myCLLocation: CLLocationCoordinate2D = CLLocationCoordinate2D(latitude: 39.90750000, longitude: 116.38805555) // ÈªòËÆ§ÂèëËµ∑‰∫∫‰ΩçÁΩÆ

    // CLLocationManager ÂÆû‰æã
    private var locationManager = CLLocationManager()
    
    override init() {
        super.init()
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization() // ËØ∑Ê±ÇÊéàÊùÉ
        locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        locationManager.startUpdatingLocation() // ÂºÄÂßã‰ΩçÁΩÆÊõ¥Êñ∞
    }
    
    // Ëé∑ÂèñËÆæÂ§áÂΩìÂâç‰ΩçÁΩÆ
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let newLocation = locations.first else { return }
        
        // Êõ¥Êñ∞ËÆæÂ§áÂΩìÂâç‰ΩçÁΩÆ‰ø°ÊÅØ
        self.myCLLocation = newLocation.coordinate
    }
    
    // ÂàùÂßãÂåñÊó∂‰ªé LeanCloud Ëé∑ÂèñÂÖ¥Ë∂£Ê†áÁ≠æÂåπÈÖçÁöÑÊ¥ªÂä®
    func fetchActivities() {
        // ‰ªé UserDefaults Ëé∑ÂèñÁî®Êà∑ÂÖ¥Ë∂£Ê†áÁ≠æ
        if let interests = UserDefaults.standard.array(forKey: "interest") as? [String], !interests.isEmpty {
                    // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ "Êó†üö´" Ê†áÁ≠æ
                    if interests.contains("Êó†üö´") {
                        // Â¶ÇÊûúÂåÖÂê´ "Êó†üö´"ÔºåÂàôÂä†ËΩΩÊâÄÊúâÊ¥ªÂä®
                        fetchAllActivities()
                    } else {
                        // Âê¶ÂàôÔºåÊ†πÊçÆÁî®Êà∑ÁöÑÂÖ¥Ë∂£Ê†áÁ≠æÂä†ËΩΩÁõ∏Â∫îÁöÑÊ¥ªÂä®
                        fetchActivitiesByInterests(interests: interests)
                    }
        } else {
            // Â¶ÇÊûúÊ≤°ÊúâÂÖ¥Ë∂£Ê†áÁ≠æÔºåÂàôÂä†ËΩΩÊâÄÊúâÊ¥ªÂä®
            fetchAllActivities()
        }
    }
    
    // Ê†πÊçÆÂÖ¥Ë∂£Ê†áÁ≠æ‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÊ¥ªÂä®
    func fetchActivitiesByInterests(interests: [String]) {
        let currentDate = Date()
        print("--------")
        print(currentDate)
        print("--------")
        // ‰ΩøÁî® LeanCloud SDK Êü•ËØ¢Ê¥ªÂä®
        let query = LCQuery(className: "Activity")
        
        // ËøáÊª§ÂÖ¥Ë∂£Ê†áÁ≠æÂåπÈÖçÁöÑÊ¥ªÂä®
        query.whereKey("interestTag", .containedIn(interests))  // Êü•ÊâæÂÖ¥Ë∂£Ê†áÁ≠æÂåÖÂê´Âú®ÁªôÂÆöÊï∞ÁªÑ‰∏≠ÁöÑÊ¥ªÂä®
        
        // ËøáÊª§Ê¥ªÂä®Êó∂Èó¥Êôö‰∫éÂΩìÂâçÊó∂Èó¥ÁöÑÊ¥ªÂä®
        query.whereKey("activityTime", .greaterThan(LCDate(currentDate))) // Ê¥ªÂä®Êó∂Èó¥ÂøÖÈ°ªÂú®ÂΩìÂâçÊó∂Èó¥‰πãÂêé
        
        query.find { [self] result in
            switch result {
            case .success(let objects):
                // Â∞ÜÊü•ËØ¢ÁªìÊûúËΩ¨Âåñ‰∏∫ Activity ÂØπË±°
                let fetchedActivities = objects.compactMap { object -> Activity? in
                    guard let activityName = object["activityName"]?.stringValue,
                          let interestTag = object["interestTag"]?.arrayValue,
                          let activityTime = object["activityTime"]?.dateValue,
                          let activityDescription = object["activityDescription"]?.stringValue,
                          let hostId = object["hostId"]?.stringValue,
                          let participantsCount = object["participantsCount"]?.intValue,
                          let participantIds = object["participantIds"]?.arrayValue,
                          let location = object["location"] as? LCGeoPoint
                    else {
                        return nil
                    }
                    
                    let imageURLString = object["image"]?.stringValue ?? ""
                    // Â¶ÇÊûú avatarURLString ÊúâÂÄºÔºåÂ∞ùËØïËΩ¨Êç¢‰∏∫ URL
                    let image = imageURLString.isEmpty ? nil : URL(string: imageURLString)
                    
                    // ÂàõÂª∫ Activity ÂØπË±°
                    return Activity(
                        id: object.objectId!.stringValue ?? "",
                        activityName: activityName,
                        interestTag: interestTag as? Array<String> ?? [],
                        activityTime: activityTime,
                        activityDescription: activityDescription,
                        hostId: hostId,
                        participantsCount: participantsCount,
                        participantIds: participantIds as? Array<String> ?? [],
                        location: CLLocationCoordinate2D(latitude: location.latitude, longitude: location.longitude),
                        image: image  // Ê≠§Â§ÑÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµÂ§ÑÁêÜÂõæÁâá
                    )
                }
                
                // Êõ¥Êñ∞Ê¥ªÂä®ÂàóË°®
                DispatchQueue.main.async {
                    self.activities = fetchedActivities
                    print(self.activities)
                }
                
            case .failure(let error):
                // ÈîôËØØÂ§ÑÁêÜ
                DispatchQueue.main.async {
                    print("Êü•ËØ¢Â§±Ë¥•: \(error.localizedDescription)")
                }
            }
        }
    }
    
    // Âä†ËΩΩÊâÄÊúâÊ¥ªÂä®Êï∞ÊçÆÔºàÂ¶ÇÊûúÊ≤°ÊúâÂÖ¥Ë∂£Ê†áÁ≠æÔºâ
    func fetchAllActivities() {
        let currentDate = Date()
        // TODO: Ê†°ÂáÜÊó∂Èó¥
//        let dateFormatter = DateFormatter()
//        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
//        dateFormatter.timeZone = TimeZone.current // ËÆæÁΩÆ‰∏∫ÂΩìÂâçËÆæÂ§áÁöÑÊó∂Âå∫
//        // Â∞Ü UTC Êó∂Èó¥ËΩ¨Êç¢‰∏∫Êú¨Âú∞Êó∂Èó¥
//        let localDateString = dateFormatter.string(from: currentDate)
        
        // ‰ΩøÁî® LeanCloud SDK Êü•ËØ¢ÊâÄÊúâÊ¥ªÂä®
        let query = LCQuery(className: "Activity")
        
        // ËøáÊª§Ê¥ªÂä®Êó∂Èó¥Êôö‰∫éÂΩìÂâçÊó∂Èó¥ÁöÑÊ¥ªÂä®
        query.whereKey("activityTime", .greaterThan(LCDate(currentDate))) // Ê¥ªÂä®Êó∂Èó¥ÂøÖÈ°ªÂú®ÂΩìÂâçÊó∂Èó¥‰πãÂêé
        
        query.find { result in
            switch result {
            case .success(let objects):
                // Â∞ÜÊü•ËØ¢ÁªìÊûúËΩ¨Âåñ‰∏∫ Activity ÂØπË±°
                let fetchedActivities = objects.compactMap { object -> Activity? in
                    guard let activityName = object["activityName"]?.stringValue,
                          let interestTag = object["interestTag"]?.arrayValue,
                          let activityTime = object["activityTime"]?.dateValue,
                          let activityDescription = object["activityDescription"]?.stringValue,
                          let hostId = object["hostId"]?.stringValue,
                          let participantsCount = object["participantsCount"]?.intValue,
                          let participantIds = object["participantIds"]?.arrayValue,
                          let location = object["location"] as? LCGeoPoint
                    else {
                        return nil
                    }
                    
                    let imageURLString = object["image"]?.stringValue ?? ""
                    // Â¶ÇÊûú avatarURLString ÊúâÂÄºÔºåÂ∞ùËØïËΩ¨Êç¢‰∏∫ URL
                    let image = imageURLString.isEmpty ? nil : URL(string: imageURLString)
                    
                    // ÂàõÂª∫ Activity ÂØπË±°
                    return Activity(
                        id: object.objectId!.stringValue ?? "",
                        activityName: activityName,
                        interestTag: interestTag as? Array<String> ?? [],
                        activityTime: activityTime,
                        activityDescription: activityDescription,
                        hostId: hostId,
                        participantsCount: participantsCount,
                        participantIds: participantIds as? Array<String> ?? [],
                        location: CLLocationCoordinate2D(latitude: location.latitude, longitude: location.longitude),
                        image: image  // Ê≠§Â§ÑÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµÂ§ÑÁêÜÂõæÁâá
                    )
                }
                
                // Êõ¥Êñ∞Ê¥ªÂä®ÂàóË°®
                DispatchQueue.main.async {
                    self.activities = fetchedActivities
                    print(self.activities)
                }
                
            case .failure(let error):
                // ÈîôËØØÂ§ÑÁêÜ
                DispatchQueue.main.async {
                    print("Êü•ËØ¢Â§±Ë¥•: \(error.localizedDescription)")
                }
            }
        }
    }
    
    // ÊêúÁ¥¢Ê¥ªÂä®
    func searchActivities() {
        if searchText.isEmpty {
            fetchActivities() // Â¶ÇÊûúÊ≤°ÊúâÊêúÁ¥¢ÊñáÊú¨ÔºåÈáçÊñ∞Âä†ËΩΩÊâÄÊúâÊ¥ªÂä®
        } else {
            // Ê†πÊçÆÊêúÁ¥¢ÊñáÊú¨ËøáÊª§Ê¥ªÂä®
            activities = activities.filter {
                $0.activityName.lowercased().contains(searchText.lowercased()) || $0.interestTag.contains { tag in
                    tag.lowercased().contains(searchText.lowercased())
                }
            }
        }
    }
    
    func LocationDistance(location: CLLocationCoordinate2D) -> String{
        let myCLLocation = CLLocation(latitude: myCLLocation.latitude, longitude: myCLLocation.longitude)
        let activityCLLocation = CLLocation(latitude: location.latitude, longitude: location.longitude)
        
        return String(format: "%.3f", myCLLocation.distance(from: activityCLLocation) / 1000)
    }
    
    func getparticipantsCountColor(isFull: Bool) -> Color {
        return isFull ? .red : .blue
    }
}

